{"ast":null,"code":"import t from \"lenis\";\nfunction s() {\n  return s = Object.assign ? Object.assign.bind() : function (t) {\n    for (var s = 1; s < arguments.length; s++) {\n      var e = arguments[s];\n      for (var i in e) Object.prototype.hasOwnProperty.call(e, i) && (t[i] = e[i]);\n    }\n    return t;\n  }, s.apply(this, arguments);\n}\nclass e {\n  constructor(_ref) {\n    let {\n      scrollElements: t,\n      rootMargin: s = \"-1px -1px -1px -1px\",\n      IORaf: e\n    } = _ref;\n    this.scrollElements = void 0, this.rootMargin = void 0, this.IORaf = void 0, this.observer = void 0, this.scrollElements = t, this.rootMargin = s, this.IORaf = e, this._init();\n  }\n  _init() {\n    this.observer = new IntersectionObserver(t => {\n      t.forEach(t => {\n        const s = this.scrollElements.find(s => s.$el === t.target);\n        t.isIntersecting ? (s && (s.isAlreadyIntersected = !0), this._setInview(t)) : s && s.isAlreadyIntersected && this._setOutOfView(t);\n      });\n    }, {\n      rootMargin: this.rootMargin\n    });\n    for (const t of this.scrollElements) this.observe(t.$el);\n  }\n  destroy() {\n    this.observer.disconnect();\n  }\n  observe(t) {\n    t && this.observer.observe(t);\n  }\n  unobserve(t) {\n    t && this.observer.unobserve(t);\n  }\n  _setInview(t) {\n    const s = this.scrollElements.find(s => s.$el === t.target);\n    this.IORaf && (null == s || s.setInteractivityOn()), !this.IORaf && (null == s || s.setInview());\n  }\n  _setOutOfView(t) {\n    const s = this.scrollElements.find(s => s.$el === t.target);\n    this.IORaf && (null == s || s.setInteractivityOff()), !this.IORaf && (null == s || s.setOutOfView()), null != s && s.attributes.scrollRepeat || this.IORaf || this.unobserve(t.target);\n  }\n}\nfunction i(t, s, e, i, r) {\n  return e + ((r - t) / (s - t) * (i - e) || 0);\n}\nfunction r(t, s) {\n  return t.reduce((t, e) => Math.abs(e - s) < Math.abs(t - s) ? e : t);\n}\nclass l {\n  constructor(_ref2) {\n    let {\n      $el: t,\n      id: s,\n      modularInstance: e,\n      subscribeElementUpdateFn: i,\n      unsubscribeElementUpdateFn: r,\n      needRaf: l,\n      scrollOrientation: n\n    } = _ref2;\n    var o, a, c, h, d;\n    this.$el = void 0, this.id = void 0, this.needRaf = void 0, this.attributes = void 0, this.scrollOrientation = void 0, this.isAlreadyIntersected = void 0, this.intersection = void 0, this.metrics = void 0, this.currentScroll = void 0, this.translateValue = void 0, this.progress = void 0, this.lastProgress = void 0, this.modularInstance = void 0, this.progressModularModules = void 0, this.isInview = void 0, this.isInteractive = void 0, this.isInFold = void 0, this.isFirstResize = void 0, this.subscribeElementUpdateFn = void 0, this.unsubscribeElementUpdateFn = void 0, this.$el = t, this.id = s, this.needRaf = l, this.scrollOrientation = n, this.modularInstance = e, this.subscribeElementUpdateFn = i, this.unsubscribeElementUpdateFn = r, this.attributes = {\n      scrollClass: null != (o = this.$el.dataset.scrollClass) ? o : \"is-inview\",\n      scrollOffset: null != (a = this.$el.dataset.scrollOffset) ? a : \"0,0\",\n      scrollPosition: null != (c = this.$el.dataset.scrollPosition) ? c : \"start,end\",\n      scrollModuleProgress: null != this.$el.dataset.scrollModuleProgress,\n      scrollCssProgress: null != this.$el.dataset.scrollCssProgress,\n      scrollEventProgress: null != (h = this.$el.dataset.scrollEventProgress) ? h : null,\n      scrollSpeed: null != this.$el.dataset.scrollSpeed ? parseFloat(this.$el.dataset.scrollSpeed) : null,\n      scrollRepeat: null != this.$el.dataset.scrollRepeat,\n      scrollCall: null != (d = this.$el.dataset.scrollCall) ? d : null,\n      scrollCallSelf: null != this.$el.dataset.scrollCallSelf,\n      scrollIgnoreFold: null != this.$el.dataset.scrollIgnoreFold,\n      scrollEnableTouchSpeed: null != this.$el.dataset.scrollEnableTouchSpeed\n    }, this.intersection = {\n      start: 0,\n      end: 0\n    }, this.metrics = {\n      offsetStart: 0,\n      offsetEnd: 0,\n      bcr: {}\n    }, this.currentScroll = \"vertical\" === this.scrollOrientation ? window.scrollY : window.scrollX, this.translateValue = 0, this.progress = 0, this.lastProgress = null, this.progressModularModules = [], this.isInview = !1, this.isInteractive = !1, this.isAlreadyIntersected = !1, this.isInFold = !1, this.isFirstResize = !0, this._init();\n  }\n  _init() {\n    this.needRaf && (this.modularInstance && this.attributes.scrollModuleProgress && this._getProgressModularModules(), this._resize());\n  }\n  onResize(_ref3) {\n    let {\n      currentScroll: t\n    } = _ref3;\n    this.currentScroll = t, this._resize();\n  }\n  onRender(_ref4) {\n    let {\n      currentScroll: t,\n      smooth: s\n    } = _ref4;\n    const e = \"vertical\" === this.scrollOrientation ? window.innerHeight : window.innerWidth;\n    if (this.currentScroll = t, this._computeProgress(), this.attributes.scrollSpeed && !isNaN(this.attributes.scrollSpeed)) if (this.attributes.scrollEnableTouchSpeed || s) {\n      if (this.isInFold) {\n        const t = Math.max(0, this.progress);\n        this.translateValue = t * e * this.attributes.scrollSpeed * -1;\n      } else {\n        const t = i(0, 1, -1, 1, this.progress);\n        this.translateValue = t * e * this.attributes.scrollSpeed * -1;\n      }\n      this.$el.style.transform = \"vertical\" === this.scrollOrientation ? `translate3d(0, ${this.translateValue}px, 0)` : `translate3d(${this.translateValue}px, 0, 0)`;\n    } else this.translateValue && (this.$el.style.transform = \"translate3d(0, 0, 0)\"), this.translateValue = 0;\n  }\n  setInview() {\n    if (this.isInview) return;\n    this.isInview = !0, this.$el.classList.add(this.attributes.scrollClass);\n    const t = this._getScrollCallFrom();\n    this.attributes.scrollCall && this._dispatchCall(\"enter\", t);\n  }\n  setOutOfView() {\n    if (!this.isInview || !this.attributes.scrollRepeat) return;\n    this.isInview = !1, this.$el.classList.remove(this.attributes.scrollClass);\n    const t = this._getScrollCallFrom();\n    this.attributes.scrollCall && this._dispatchCall(\"leave\", t);\n  }\n  setInteractivityOn() {\n    this.isInteractive || (this.isInteractive = !0, this.subscribeElementUpdateFn(this));\n  }\n  setInteractivityOff() {\n    this.isInteractive && (this.isInteractive = !1, this.unsubscribeElementUpdateFn(this), null != this.lastProgress && this._computeProgress(r([0, 1], this.lastProgress)));\n  }\n  _resize() {\n    this.metrics.bcr = this.$el.getBoundingClientRect(), this._computeMetrics(), this._computeIntersection(), this.isFirstResize && (this.isFirstResize = !1, this.isInFold && this.setInview());\n  }\n  _computeMetrics() {\n    const {\n        top: t,\n        left: s,\n        height: e,\n        width: i\n      } = this.metrics.bcr,\n      r = \"vertical\" === this.scrollOrientation ? window.innerHeight : window.innerWidth,\n      l = \"vertical\" === this.scrollOrientation ? e : i;\n    this.metrics.offsetStart = this.currentScroll + (\"vertical\" === this.scrollOrientation ? t : s) - this.translateValue, this.metrics.offsetEnd = this.metrics.offsetStart + l, this.isInFold = this.metrics.offsetStart < r && !this.attributes.scrollIgnoreFold;\n  }\n  _computeIntersection() {\n    const t = \"vertical\" === this.scrollOrientation ? window.innerHeight : window.innerWidth,\n      s = \"vertical\" === this.scrollOrientation ? this.metrics.bcr.height : this.metrics.bcr.width,\n      e = this.attributes.scrollOffset.split(\",\"),\n      i = null != e[0] ? e[0].trim() : \"0\",\n      r = null != e[1] ? e[1].trim() : \"0\",\n      l = this.attributes.scrollPosition.split(\",\");\n    let n = null != l[0] ? l[0].trim() : \"start\";\n    const o = null != l[1] ? l[1].trim() : \"end\",\n      a = i.includes(\"%\") ? t * parseInt(i.replace(\"%\", \"\").trim()) * .01 : parseInt(i),\n      c = r.includes(\"%\") ? t * parseInt(r.replace(\"%\", \"\").trim()) * .01 : parseInt(r);\n    switch (this.isInFold && (n = \"fold\"), n) {\n      case \"start\":\n      default:\n        this.intersection.start = this.metrics.offsetStart - t + a;\n        break;\n      case \"middle\":\n        this.intersection.start = this.metrics.offsetStart - t + a + .5 * s;\n        break;\n      case \"end\":\n        this.intersection.start = this.metrics.offsetStart - t + a + s;\n        break;\n      case \"fold\":\n        this.intersection.start = 0;\n    }\n    switch (o) {\n      case \"start\":\n        this.intersection.end = this.metrics.offsetStart - c;\n        break;\n      case \"middle\":\n        this.intersection.end = this.metrics.offsetStart - c + .5 * s;\n        break;\n      default:\n        this.intersection.end = this.metrics.offsetStart - c + s;\n    }\n    if (this.intersection.end <= this.intersection.start) switch (o) {\n      case \"start\":\n      default:\n        this.intersection.end = this.intersection.start + 1;\n        break;\n      case \"middle\":\n        this.intersection.end = this.intersection.start + .5 * s;\n        break;\n      case \"end\":\n        this.intersection.end = this.intersection.start + s;\n    }\n  }\n  _computeProgress(t) {\n    const s = null != t ? t : (e = i(this.intersection.start, this.intersection.end, 0, 1, this.currentScroll)) < 0 ? 0 : e > 1 ? 1 : e;\n    var e;\n    if (this.progress = s, s != this.lastProgress) {\n      if (this.lastProgress = s, this.attributes.scrollCssProgress && this._setCssProgress(s), this.attributes.scrollEventProgress && this._setCustomEventProgress(s), this.attributes.scrollModuleProgress) for (const t of this.progressModularModules) this.modularInstance && this.modularInstance.call(\"onScrollProgress\", s, t.moduleName, t.moduleId);\n      s > 0 && s < 1 && this.setInview(), 0 === s && this.setOutOfView(), 1 === s && this.setOutOfView();\n    }\n  }\n  _setCssProgress() {\n    let t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    this.$el.style.setProperty(\"--progress\", t.toString());\n  }\n  _setCustomEventProgress() {\n    let t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    const s = this.attributes.scrollEventProgress;\n    if (!s) return;\n    const e = new CustomEvent(s, {\n      detail: {\n        target: this.$el,\n        progress: t\n      }\n    });\n    window.dispatchEvent(e);\n  }\n  _getProgressModularModules() {\n    if (!this.modularInstance) return;\n    const t = Object.keys(this.$el.dataset).filter(t => t.includes(\"module\")),\n      s = Object.entries(this.modularInstance.modules);\n    if (t.length) for (const e of t) {\n      const t = this.$el.dataset[e];\n      if (!t) return;\n      for (const e of s) {\n        const [s, i] = e;\n        t in i && this.progressModularModules.push({\n          moduleName: s,\n          moduleId: t\n        });\n      }\n    }\n  }\n  _getScrollCallFrom() {\n    const t = r([this.intersection.start, this.intersection.end], this.currentScroll);\n    return this.intersection.start === t ? \"start\" : \"end\";\n  }\n  _dispatchCall(t, s) {\n    var e, i;\n    const r = null == (e = this.attributes.scrollCall) ? void 0 : e.split(\",\"),\n      l = null == (i = this.attributes) ? void 0 : i.scrollCallSelf;\n    if (r && r.length > 1) {\n      var n;\n      const [e, i, o] = r;\n      let a;\n      a = l ? this.$el.dataset[`module${i.trim()}`] : o, this.modularInstance && this.modularInstance.call(e.trim(), {\n        target: this.$el,\n        way: t,\n        from: s\n      }, i.trim(), null == (n = a) ? void 0 : n.trim());\n    } else if (r) {\n      const [e] = r,\n        i = new CustomEvent(e, {\n          detail: {\n            target: this.$el,\n            way: t,\n            from: s\n          }\n        });\n      window.dispatchEvent(i);\n    }\n  }\n}\nconst n = [\"scrollOffset\", \"scrollPosition\", \"scrollModuleProgress\", \"scrollCssProgress\", \"scrollEventProgress\", \"scrollSpeed\"];\nclass o {\n  constructor(_ref5) {\n    let {\n      $el: t,\n      modularInstance: s,\n      triggerRootMargin: e,\n      rafRootMargin: i,\n      scrollOrientation: r\n    } = _ref5;\n    this.$scrollContainer = void 0, this.modularInstance = void 0, this.triggerRootMargin = void 0, this.rafRootMargin = void 0, this.scrollElements = void 0, this.triggeredScrollElements = void 0, this.RAFScrollElements = void 0, this.scrollElementsToUpdate = void 0, this.IOTriggerInstance = void 0, this.IORafInstance = void 0, this.scrollOrientation = void 0, t ? (this.$scrollContainer = t, this.modularInstance = s, this.scrollOrientation = r, this.triggerRootMargin = null != e ? e : \"-1px -1px -1px -1px\", this.rafRootMargin = null != i ? i : \"100% 100% 100% 100%\", this.scrollElements = [], this.triggeredScrollElements = [], this.RAFScrollElements = [], this.scrollElementsToUpdate = [], this._init()) : console.error(\"Please provide a DOM Element as scrollContainer\");\n  }\n  _init() {\n    const t = this.$scrollContainer.querySelectorAll(\"[data-scroll]\"),\n      s = Array.from(t);\n    this._subscribeScrollElements(s), this.IOTriggerInstance = new e({\n      scrollElements: [...this.triggeredScrollElements],\n      rootMargin: this.triggerRootMargin,\n      IORaf: !1\n    }), this.IORafInstance = new e({\n      scrollElements: [...this.RAFScrollElements],\n      rootMargin: this.rafRootMargin,\n      IORaf: !0\n    });\n  }\n  destroy() {\n    this.IOTriggerInstance.destroy(), this.IORafInstance.destroy(), this._unsubscribeAllScrollElements();\n  }\n  onResize(_ref6) {\n    let {\n      currentScroll: t\n    } = _ref6;\n    for (const s of this.RAFScrollElements) s.onResize({\n      currentScroll: t\n    });\n  }\n  onRender(_ref7) {\n    let {\n      currentScroll: t,\n      smooth: s\n    } = _ref7;\n    for (const e of this.scrollElementsToUpdate) e.onRender({\n      currentScroll: t,\n      smooth: s\n    });\n  }\n  removeScrollElements(t) {\n    const s = t.querySelectorAll(\"[data-scroll]\");\n    if (s.length) {\n      for (let t = 0; t < this.triggeredScrollElements.length; t++) {\n        const e = this.triggeredScrollElements[t];\n        Array.from(s).indexOf(e.$el) > -1 && (this.IOTriggerInstance.unobserve(e.$el), this.triggeredScrollElements.splice(t, 1));\n      }\n      for (let t = 0; t < this.RAFScrollElements.length; t++) {\n        const e = this.RAFScrollElements[t];\n        Array.from(s).indexOf(e.$el) > -1 && (this.IORafInstance.unobserve(e.$el), this.RAFScrollElements.splice(t, 1));\n      }\n      s.forEach(t => {\n        const s = this.scrollElementsToUpdate.find(s => s.$el === t),\n          e = this.scrollElements.find(s => s.$el === t);\n        s && this._unsubscribeElementUpdate(s), e && (this.scrollElements = this.scrollElements.filter(t => t.id != e.id));\n      });\n    }\n  }\n  addScrollElements(t) {\n    const s = t.querySelectorAll(\"[data-scroll]\"),\n      e = [];\n    this.scrollElements.forEach(t => {\n      e.push(t.id);\n    });\n    const i = Math.max(...e) + 1,\n      r = Array.from(s);\n    this._subscribeScrollElements(r, i, !0);\n  }\n  _subscribeScrollElements(t) {\n    let s = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let e = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : !1;\n    for (let i = 0; i < t.length; i++) {\n      const r = t[i],\n        n = this._checkRafNeeded(r),\n        o = new l({\n          $el: r,\n          id: s + i,\n          scrollOrientation: this.scrollOrientation,\n          modularInstance: this.modularInstance,\n          subscribeElementUpdateFn: this._subscribeElementUpdate.bind(this),\n          unsubscribeElementUpdateFn: this._unsubscribeElementUpdate.bind(this),\n          needRaf: n\n        });\n      this.scrollElements.push(o), n ? (this.RAFScrollElements.push(o), e && (this.IORafInstance.scrollElements.push(o), this.IORafInstance.observe(o.$el))) : (this.triggeredScrollElements.push(o), e && (this.IOTriggerInstance.scrollElements.push(o), this.IOTriggerInstance.observe(o.$el)));\n    }\n  }\n  _unsubscribeAllScrollElements() {\n    this.scrollElements = [], this.RAFScrollElements = [], this.triggeredScrollElements = [], this.scrollElementsToUpdate = [];\n  }\n  _subscribeElementUpdate(t) {\n    this.scrollElementsToUpdate.push(t);\n  }\n  _unsubscribeElementUpdate(t) {\n    this.scrollElementsToUpdate = this.scrollElementsToUpdate.filter(s => s.id != t.id);\n  }\n  _checkRafNeeded(t) {\n    let s = [...n];\n    const e = t => {\n      s = s.filter(s => s != t);\n    };\n    if (t.dataset.scrollOffset) {\n      if (\"0,0\" != t.dataset.scrollOffset.split(\",\").map(t => t.replace(\"%\", \"\").trim()).join(\",\")) return !0;\n      e(\"scrollOffset\");\n    } else e(\"scrollOffset\");\n    if (t.dataset.scrollPosition) {\n      if (\"top,bottom\" != t.dataset.scrollPosition.trim()) return !0;\n      e(\"scrollPosition\");\n    } else e(\"scrollPosition\");\n    if (t.dataset.scrollSpeed && !isNaN(parseFloat(t.dataset.scrollSpeed))) return !0;\n    e(\"scrollSpeed\");\n    for (const e of s) if (e in t.dataset) return !0;\n    return !1;\n  }\n}\nclass a {\n  constructor(_ref8) {\n    let {\n      resizeElements: t,\n      resizeCallback: s = () => {}\n    } = _ref8;\n    this.$resizeElements = void 0, this.isFirstObserve = void 0, this.observer = void 0, this.resizeCallback = void 0, this.$resizeElements = t, this.resizeCallback = s, this.isFirstObserve = !0, this._init();\n  }\n  _init() {\n    this.observer = new ResizeObserver(t => {\n      var s;\n      !this.isFirstObserve && (null == (s = this.resizeCallback) || s.call(this)), this.isFirstObserve = !1;\n    });\n    for (const t of this.$resizeElements) this.observer.observe(t);\n  }\n  destroy() {\n    this.observer.disconnect();\n  }\n}\nconst c = {\n  wrapper: window,\n  content: document.documentElement,\n  wheelEventsTarget: window,\n  eventsTarget: window,\n  smoothWheel: !0,\n  syncTouch: !1,\n  syncTouchLerp: .075,\n  touchInertiaMultiplier: 35,\n  duration: .75,\n  easing: t => Math.min(1, 1.001 - Math.pow(2, -10 * t)),\n  lerp: .1,\n  infinite: !1,\n  orientation: \"vertical\",\n  gestureOrientation: \"vertical\",\n  touchMultiplier: 1,\n  wheelMultiplier: 1,\n  autoResize: !0\n};\nclass h {\n  constructor() {\n    let {\n      lenisOptions: t = {},\n      modularInstance: e,\n      triggerRootMargin: i,\n      rafRootMargin: r,\n      autoResize: l = !0,\n      autoStart: n = !0,\n      scrollCallback: o = () => {},\n      initCustomTicker: a,\n      destroyCustomTicker: h\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.rafPlaying = void 0, this.lenisInstance = void 0, this.coreInstance = void 0, this.lenisOptions = void 0, this.modularInstance = void 0, this.triggerRootMargin = void 0, this.rafRootMargin = void 0, this.rafInstance = void 0, this.autoResize = void 0, this.autoStart = void 0, this.ROInstance = void 0, this.initCustomTicker = void 0, this.destroyCustomTicker = void 0, this._onRenderBind = void 0, this._onResizeBind = void 0, this._onScrollToBind = void 0, this.lenisOptions = s({}, c, t), Object.assign(this, {\n      lenisOptions: t,\n      modularInstance: e,\n      triggerRootMargin: i,\n      rafRootMargin: r,\n      autoResize: l,\n      autoStart: n,\n      scrollCallback: o,\n      initCustomTicker: a,\n      destroyCustomTicker: h\n    }), this._onRenderBind = this._onRender.bind(this), this._onScrollToBind = this._onScrollTo.bind(this), this._onResizeBind = this._onResize.bind(this), this.rafPlaying = !1, this._init();\n  }\n  _init() {\n    var s;\n    this.lenisInstance = new t({\n      wrapper: this.lenisOptions.wrapper,\n      content: this.lenisOptions.content,\n      eventsTarget: this.lenisOptions.eventsTarget,\n      lerp: this.lenisOptions.lerp,\n      duration: this.lenisOptions.duration,\n      orientation: this.lenisOptions.orientation,\n      gestureOrientation: this.lenisOptions.gestureOrientation,\n      smoothWheel: this.lenisOptions.smoothWheel,\n      syncTouch: this.lenisOptions.syncTouch,\n      syncTouchLerp: this.lenisOptions.syncTouchLerp,\n      touchInertiaMultiplier: this.lenisOptions.touchInertiaMultiplier,\n      wheelMultiplier: this.lenisOptions.wheelMultiplier,\n      touchMultiplier: this.lenisOptions.touchMultiplier,\n      easing: this.lenisOptions.easing\n    }), null == (s = this.lenisInstance) || s.on(\"scroll\", this.scrollCallback), document.documentElement.setAttribute(\"data-scroll-orientation\", this.lenisInstance.options.orientation), requestAnimationFrame(() => {\n      this.coreInstance = new o({\n        $el: this.lenisInstance.rootElement,\n        modularInstance: this.modularInstance,\n        triggerRootMargin: this.triggerRootMargin,\n        rafRootMargin: this.rafRootMargin,\n        scrollOrientation: this.lenisInstance.options.orientation\n      }), this._bindEvents(), this.initCustomTicker && !this.destroyCustomTicker ? console.warn(\"initCustomTicker callback is declared, but destroyCustomTicker is not. Please pay attention. It could cause trouble.\") : !this.initCustomTicker && this.destroyCustomTicker && console.warn(\"destroyCustomTicker callback is declared, but initCustomTicker is not. Please pay attention. It could cause trouble.\"), this.autoStart && this.start();\n    });\n  }\n  destroy() {\n    var t;\n    this.stop(), this._unbindEvents(), this.lenisInstance.destroy(), null == (t = this.coreInstance) || t.destroy(), requestAnimationFrame(() => {\n      var t;\n      null == (t = this.coreInstance) || t.destroy();\n    });\n  }\n  _bindEvents() {\n    this._bindScrollToEvents(), this.autoResize && (\"ResizeObserver\" in window ? this.ROInstance = new a({\n      resizeElements: [document.body],\n      resizeCallback: this._onResizeBind\n    }) : window.addEventListener(\"resize\", this._onResizeBind));\n  }\n  _unbindEvents() {\n    this._unbindScrollToEvents(), this.autoResize && (\"ResizeObserver\" in window ? this.ROInstance && this.ROInstance.destroy() : window.removeEventListener(\"resize\", this._onResizeBind));\n  }\n  _bindScrollToEvents(t) {\n    const s = t || this.lenisInstance.rootElement,\n      e = null == s ? void 0 : s.querySelectorAll(\"[data-scroll-to]\");\n    (null == e ? void 0 : e.length) && e.forEach(t => {\n      t.addEventListener(\"click\", this._onScrollToBind, !1);\n    });\n  }\n  _unbindScrollToEvents(t) {\n    const s = t || this.lenisInstance.rootElement,\n      e = null == s ? void 0 : s.querySelectorAll(\"[data-scroll-to]\");\n    (null == e ? void 0 : e.length) && e.forEach(t => {\n      t.removeEventListener(\"click\", this._onScrollToBind, !1);\n    });\n  }\n  _onResize() {\n    requestAnimationFrame(() => {\n      var t;\n      null == (t = this.coreInstance) || t.onResize({\n        currentScroll: this.lenisInstance.scroll\n      });\n    });\n  }\n  _onRender() {\n    var t, s;\n    null == (t = this.lenisInstance) || t.raf(Date.now()), null == (s = this.coreInstance) || s.onRender({\n      currentScroll: this.lenisInstance.scroll,\n      smooth: this.lenisInstance.isSmooth\n    });\n  }\n  _onScrollTo(t) {\n    var s;\n    t.preventDefault();\n    const e = null != (s = t.currentTarget) ? s : null;\n    if (!e) return;\n    const i = e.getAttribute(\"data-scroll-to-href\") || e.getAttribute(\"href\"),\n      r = e.getAttribute(\"data-scroll-to-offset\") || 0,\n      l = e.getAttribute(\"data-scroll-to-duration\") || this.lenisOptions.duration || c.duration;\n    i && this.scrollTo(i, {\n      offset: \"string\" == typeof r ? parseInt(r) : r,\n      duration: \"string\" == typeof l ? parseInt(l) : l\n    });\n  }\n  start() {\n    var t;\n    this.rafPlaying || (null == (t = this.lenisInstance) || t.start(), this.rafPlaying = !0, this.initCustomTicker ? this.initCustomTicker(this._onRenderBind) : this._raf());\n  }\n  stop() {\n    var t;\n    this.rafPlaying && (null == (t = this.lenisInstance) || t.stop(), this.rafPlaying = !1, this.destroyCustomTicker ? this.destroyCustomTicker(this._onRenderBind) : this.rafInstance && cancelAnimationFrame(this.rafInstance));\n  }\n  removeScrollElements(t) {\n    var s;\n    t ? (this._unbindScrollToEvents(t), null == (s = this.coreInstance) || s.removeScrollElements(t)) : console.error(\"Please provide a DOM Element as $oldContainer\");\n  }\n  addScrollElements(t) {\n    var s;\n    t ? (null == (s = this.coreInstance) || s.addScrollElements(t), requestAnimationFrame(() => {\n      this._bindScrollToEvents(t);\n    })) : console.error(\"Please provide a DOM Element as $newContainer\");\n  }\n  resize() {\n    this._onResizeBind();\n  }\n  scrollTo(t, s) {\n    var e;\n    null == (e = this.lenisInstance) || e.scrollTo(t, {\n      offset: null == s ? void 0 : s.offset,\n      lerp: null == s ? void 0 : s.lerp,\n      duration: null == s ? void 0 : s.duration,\n      immediate: null == s ? void 0 : s.immediate,\n      lock: null == s ? void 0 : s.lock,\n      force: null == s ? void 0 : s.force,\n      easing: null == s ? void 0 : s.easing,\n      onComplete: null == s ? void 0 : s.onComplete\n    });\n  }\n  _raf() {\n    this._onRenderBind(), this.rafInstance = requestAnimationFrame(() => this._raf());\n  }\n}\nexport { h as default };","map":{"version":3,"mappings":"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","names":["IO","constructor","IORaf","scrollElements","rootMargin","this","observer","_init","IntersectionObserver","entries","forEach","entry","$targetItem","find","item","$el","target","isIntersecting","isAlreadyIntersected","_setInview","_setOutOfView","scrollElement","observe","destroy","disconnect","$scrollElement","unobserve","setInteractivityOn","setInview","setInteractivityOff","setOutOfView","attributes","scrollRepeat","mapRange","inMin","inMax","outMin","outMax","value","array","reduce","prev","curr","Math","abs","ScrollElement","scrollOrientation","id","modularInstance","subscribeElementUpdateFn","unsubscribeElementUpdateFn","needRaf","_this$$el$dataset$scr","intersection","metrics","currentScroll","translateValue","progress","lastProgress","progressModularModules","isInview","isInteractive","isInFold","isFirstResize","scrollClass","dataset","scrollOffset","_this$$el$dataset$scr2","scrollPosition","_this$$el$dataset$scr3","scrollModuleProgress","scrollCssProgress","scrollEventProgress","_this$$el$dataset$scr4","scrollSpeed","parseFloat","scrollCall","_this$$el$dataset$scr5","scrollCallSelf","scrollIgnoreFold","scrollEnableTouchSpeed","start","end","offsetStart","offsetEnd","bcr","window","scrollY","scrollX","_getProgressModularModules","_resize","onResize","onRender","smooth","wSize","innerHeight","innerWidth","_computeProgress","isNaN","max","style","transform","classList","add","from","_getScrollCallFrom","_dispatchCall","remove","closestNumber","getBoundingClientRect","_computeMetrics","_computeIntersection","top","left","height","width","metricsSize","offset","split","undefined","trim","scrollPositionStart","scrollPositionEnd","viewportStart","includes","parseInt","replace","viewportEnd","forcedProgress","_setCssProgress","_setCustomEventProgress","modularModules","call","moduleName","moduleId","currentProgress","setProperty","toString","customEventName","customEvent","CustomEvent","detail","dispatchEvent","modulesIdNames","Object","keys","filter","key","modules","length","modulesIdName","module","moduleObj","push","closestIntersectionValue","way","callParameters","_this$attributes$scro","callSelf","_this$attributes","_targetModuleId","func","targetModuleId","ATTRIBUTES_THAT_NEED_RAF","Core","triggerRootMargin","rafRootMargin","$scrollContainer","triggeredScrollElements","RAFScrollElements","scrollElementsToUpdate","IOTriggerInstance","IORafInstance","console","error","$scrollElements","querySelectorAll","$scrollElementsArr","Array","_subscribeScrollElements","_unsubscribeAllScrollElements","removeScrollElements","$oldContainer","$scrollElementsToRemove","index","indexOf","splice","targetScrollElementToUpdate","targetScrollElement","_unsubscribeElementUpdate","scrollElementItem","addScrollElements","$newContainer","ids","fromIndex","toObserve","_checkRafNeeded","scrollElementInstance","_subscribeElementUpdate","bind","scrollElementToUpdate","attributesThatNeedRaf","removeAttribute","attributeToRemove","attribute","map","test","join","resizeCallback","resizeElements","$resizeElements","isFirstObserve","ResizeObserver","_this$resizeCallback","$resizeElement","defaultLenisOptions","wrapper","content","document","documentElement","wheelEventsTarget","eventsTarget","smoothWheel","syncTouch","syncTouchLerp","touchInertiaMultiplier","duration","easing","t","min","pow","lerp","infinite","orientation","gestureOrientation","touchMultiplier","wheelMultiplier","autoResize","lenisOptions","autoStart","scrollCallback","initCustomTicker","destroyCustomTicker","rafPlaying","lenisInstance","coreInstance","rafInstance","ROInstance","_onRenderBind","_onResizeBind","_onScrollToBind","_extends","assign","_onRender","_onScrollTo","_onResize","_this$lenisInstance","Lenis","on","setAttribute","options","requestAnimationFrame","rootElement","_bindEvents","warn","_this$coreInstance","stop","_unbindEvents","_this$coreInstance2","_bindScrollToEvents","RO","body","addEventListener","_unbindScrollToEvents","removeEventListener","$container","$rootContainer","$scrollToElements","_this$coreInstance3","scroll","_this$lenisInstance2","raf","Date","now","_this$coreInstance4","isSmooth","event","preventDefault","$target","_event$currentTarget","currentTarget","getAttribute","scrollTo","_this$lenisInstance3","_raf","_this$lenisInstance4","cancelAnimationFrame","_this$coreInstance5","_this$coreInstance6","resize","_this$lenisInstance5","immediate","lock","force","onComplete"],"sources":["C:\\Users\\Shan\\Desktop\\WEB DEV2\\Mern Stack\\MyPortfolio\\ShantanuPortfolio\\node_modules\\locomotive-scroll\\src\\core\\IO.ts","C:\\Users\\Shan\\Desktop\\WEB DEV2\\Mern Stack\\MyPortfolio\\ShantanuPortfolio\\node_modules\\locomotive-scroll\\src\\utils\\maths.ts","C:\\Users\\Shan\\Desktop\\WEB DEV2\\Mern Stack\\MyPortfolio\\ShantanuPortfolio\\node_modules\\locomotive-scroll\\src\\core\\ScrollElement.ts","C:\\Users\\Shan\\Desktop\\WEB DEV2\\Mern Stack\\MyPortfolio\\ShantanuPortfolio\\node_modules\\locomotive-scroll\\src\\core\\Core.ts","C:\\Users\\Shan\\Desktop\\WEB DEV2\\Mern Stack\\MyPortfolio\\ShantanuPortfolio\\node_modules\\locomotive-scroll\\src\\core\\RO.ts","C:\\Users\\Shan\\Desktop\\WEB DEV2\\Mern Stack\\MyPortfolio\\ShantanuPortfolio\\node_modules\\locomotive-scroll\\src\\index.ts"],"sourcesContent":["/**\n * Intersection Observer\n *\n * Detecting visibility of an element in the viewport.\n *\n * Features functions to:\n *\n * - Trigger inview/outOfView callbacks\n * - If the element has a requestAnimationFrame dependency, set interactivy status for the ScrollElement Class\n *\n * References:\n *\n * - {@link https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API}\n */\n\nimport { IIOOptions } from '../types';\nimport ScrollElement from './ScrollElement';\n\nexport default class IO {\n    public scrollElements: ScrollElement[];\n    private rootMargin: string;\n    private IORaf: boolean;\n    private observer!: IntersectionObserver;\n\n    constructor({\n        scrollElements,\n        rootMargin = '-1px -1px -1px -1px',\n        IORaf,\n    }: IIOOptions) {\n        // Parameters\n        this.scrollElements = scrollElements;\n        this.rootMargin = rootMargin;\n        this.IORaf = IORaf;\n\n        // Init\n        this._init();\n    }\n\n    /**\n     * Lifecyle - Initialize Intersection Observer.\n     *\n     * @private\n     */\n    private _init() {\n        // Options\n        const observerOptions = {\n            rootMargin: this.rootMargin,\n        };\n\n        // Callback\n        const onIntersect = (entries: IntersectionObserverEntry[]) => {\n            entries.forEach((entry) => {\n                const $targetItem: ScrollElement | undefined =\n                    this.scrollElements.find(\n                        (item) => item.$el === entry.target\n                    );\n\n                if (entry.isIntersecting) {\n                    $targetItem && ($targetItem.isAlreadyIntersected = true);\n                    this._setInview(entry);\n                } else if ($targetItem && $targetItem.isAlreadyIntersected) {\n                    this._setOutOfView(entry);\n                }\n            });\n        };\n\n        // Instance\n        this.observer = new IntersectionObserver(onIntersect, observerOptions);\n\n        // Observe each default elements\n        for (const scrollElement of this.scrollElements) {\n            const $scrollElement = scrollElement.$el;\n            this.observe($scrollElement);\n        }\n    }\n\n    /**\n     * Lifecyle - Destroy Intersection Observer.\n     */\n    public destroy() {\n        this.observer.disconnect();\n    }\n\n    /**\n     * Subscribe element to the Intersection Observer.\n     *\n     * @param {HTMLElement} $scrollElement - DOM Element to observe.\n     */\n    public observe($scrollElement: HTMLElement) {\n        if (!$scrollElement) {\n            return;\n        }\n\n        this.observer.observe($scrollElement);\n    }\n\n    /**\n     * Unsubscribe element to the Intersection Observer.\n     *\n     * @param {HTMLElement} $scrollElement - DOM Element to unobserve.\n     */\n    public unobserve($scrollElement: HTMLElement) {\n        if (!$scrollElement) {\n            return;\n        }\n\n        this.observer.unobserve($scrollElement);\n    }\n\n    /**\n     * Find ScrollElementReference instance and trigger inview callbacks.\n     *\n     * @private\n     *\n     * @param {IntersectionObserverEntry} entry - DOM Element to observe.\n     */\n    private _setInview(entry: IntersectionObserverEntry) {\n        const scrollElement = this.scrollElements.find(\n            (scrollElement) => scrollElement.$el === entry.target\n        );\n\n        this.IORaf && scrollElement?.setInteractivityOn();\n        !this.IORaf && scrollElement?.setInview();\n    }\n\n    /**\n     * Find ScrollElementReference instance and trigger out of view callbacks.\n     *\n     * @private\n     *\n     * @param {IntersectionObserverEntry} entry - DOM Element to observe.\n     */\n    private _setOutOfView(entry: IntersectionObserverEntry) {\n        const scrollElement = this.scrollElements.find(\n            (scrollElement) => scrollElement.$el === entry.target\n        );\n\n        this.IORaf && scrollElement?.setInteractivityOff();\n        !this.IORaf && scrollElement?.setOutOfView();\n\n        // Unobserve if element doesn't have repeat attribute\n        if (!scrollElement?.attributes.scrollRepeat && !this.IORaf) {\n            this.unobserve(entry.target as HTMLElement);\n        }\n    }\n}\n","// https://greensock.com/docs/v3/GSAP/gsap.utils\n\n/**\n * Clamp a value to fit within a specific range (ex: clamp(0, 100, -12) --> 0).\n *\n * @param {number} min   - Minimum value expected.\n * @param {number} max   - Maximum value expected.\n * @param {number} value - Current value.\n *\n * @returns {number} - Clamped value.\n */\nexport function clamp(min: number, max: number, value: number): number {\n    return value < min ? min : value > max ? max : value;\n}\n\n/**\n * Map one range to another (ex: mapRange(-10, 10, 0, 100, 5) --> 75).\n *\n * @param {number} inMin  - Current minimum value.\n * @param {number} inMax  - Current maximum value.\n * @param {number} outMin - Maximum value expected.\n * @param {number} outMax - Maximum value expected.\n * @param {number} value  - Current value.\n *\n * @returns {number} - New value that should be between minimum value expected and maximum value.\n */\nexport function mapRange(\n    inMin: number,\n    inMax: number,\n    outMin: number,\n    outMax: number,\n    value: number\n): number {\n    const inRange = inMax - inMin;\n    const outRange = outMax - outMin;\n    return outMin + (((value - inMin) / inRange) * outRange || 0);\n}\n\n/**\n * Map a number within a range to a progress between 0 to 1 (ex: normalize(100, 200, 150) --> 0.5).\n *\n * @param {number} min   - Current minimum value.\n * @param {number} max   - Current maximum value.\n * @param {number} value - Current value.\n *\n * @returns {number} - New value that should be between 0 and 1.\n */\nexport function normalize(min: number, max: number, value: number): number {\n    return mapRange(min, max, 0, 1, value);\n}\n\n/**\n * Get closest number from an array.\n *\n * @param {number[]} array  - Numbers array.\n * @param {number}   target - Reference value.\n *\n * @returns {number} - Closest number.\n */\nexport function closestNumber(array: number[], target: number): number {\n    return array.reduce((prev, curr) => {\n        return Math.abs(curr - target) < Math.abs(prev - target) ? curr : prev;\n    });\n}\n","/**\n * Scroll Element\n *\n * Give tools to compute element progress in the viewport and triggers callbacks to animate it.\n *\n * Features functions to:\n *\n * - scrollClass - Add a custom class when the element is intersected by the offset\n * - scrollOffset - Determine offsets to intersect the element\n * - scrollPosition - Determine the element positions to consider an element as intersected.\n * - scrollModuleProgress - Send scroll progress to modular module that have a specific method (PROGRESS_MODULAR_METHOD)\n * - scrollCssProgress - Add a specific css variable (PROGRESS_CSS_VAR) that store the scroll progress\n * - scrollEventProgress - Send scroll progress to custom event listeners.\n * - scrollSpeed - Add a scroll multiplicator to create a parallax effect\n * - scrollRepeat - Repeat the option to trigger animation each time the element is intersected\n * - scrollCall - Call a custom event or a modular callback when the element is intersected\n */\n\nimport {\n    IModular,\n    IScrollElementOptions,\n    IScrollElementAttributes,\n    IScrollElementIntersection,\n    IScrollElementMetrics,\n    IProgressModularModules,\n    IScrollElementCallbacksValues,\n    scrollCallWay,\n    scrollCallFrom,\n    scrollOrientation,\n} from '../types';\nimport { clamp, closestNumber, normalize, mapRange } from '../utils/maths';\n\n/** Constants */\nconst INVIEW_CLASS = 'is-inview';\nconst PROGRESS_CSS_VAR = '--progress';\nconst PROGRESS_MODULAR_METHOD = 'onScrollProgress';\n\nexport default class ScrollElement {\n    public $el: HTMLElement;\n    public id: number;\n    public needRaf: boolean;\n    public attributes: IScrollElementAttributes;\n    public scrollOrientation: scrollOrientation;\n    public isAlreadyIntersected: boolean;\n\n    private intersection: IScrollElementIntersection;\n    private metrics: IScrollElementMetrics;\n    private currentScroll: number;\n    private translateValue: number;\n    private progress: number;\n    private lastProgress: number | null;\n    private modularInstance?: IModular;\n    private progressModularModules: IProgressModularModules[];\n    private isInview: boolean;\n    private isInteractive: boolean;\n    private isInFold: boolean;\n    private isFirstResize: boolean;\n\n    private subscribeElementUpdateFn: (scrollElement: ScrollElement) => void;\n    private unsubscribeElementUpdateFn: (scrollElement: ScrollElement) => void;\n\n    constructor({\n        $el,\n        id,\n        modularInstance,\n        subscribeElementUpdateFn,\n        unsubscribeElementUpdateFn,\n        needRaf,\n        scrollOrientation,\n    }: IScrollElementOptions) {\n        // Scroll DOM element\n        this.$el = $el;\n        // Unique ID\n        this.id = id;\n        // RAF option\n        this.needRaf = needRaf;\n        // Scroll Direction\n        this.scrollOrientation = scrollOrientation;\n        // Modular.js\n        this.modularInstance = modularInstance;\n        // Parent's callbacks\n        this.subscribeElementUpdateFn = subscribeElementUpdateFn;\n        this.unsubscribeElementUpdateFn = unsubscribeElementUpdateFn;\n\n        // Attributes\n        this.attributes = {\n            scrollClass: this.$el.dataset['scrollClass'] ?? INVIEW_CLASS,\n            scrollOffset: this.$el.dataset['scrollOffset'] ?? '0,0',\n            scrollPosition: this.$el.dataset['scrollPosition'] ?? 'start,end',\n            scrollModuleProgress:\n                this.$el.dataset['scrollModuleProgress'] != null,\n            scrollCssProgress: this.$el.dataset['scrollCssProgress'] != null,\n            scrollEventProgress:\n                this.$el.dataset['scrollEventProgress'] ?? null,\n            scrollSpeed:\n                this.$el.dataset['scrollSpeed'] != null\n                    ? parseFloat(this.$el.dataset['scrollSpeed'])\n                    : null,\n            scrollRepeat: this.$el.dataset['scrollRepeat'] != null,\n            scrollCall: this.$el.dataset['scrollCall'] ?? null,\n            scrollCallSelf: this.$el.dataset['scrollCallSelf'] != null,\n            scrollIgnoreFold: this.$el.dataset['scrollIgnoreFold'] != null,\n            scrollEnableTouchSpeed:\n                this.$el.dataset['scrollEnableTouchSpeed'] != null,\n        };\n\n        // Limits\n        this.intersection = {\n            start: 0,\n            end: 0,\n        };\n\n        // Metrics\n        this.metrics = {\n            offsetStart: 0,\n            offsetEnd: 0,\n            bcr: {} as DOMRect,\n        };\n\n        // Scroll Values\n        this.currentScroll =\n            this.scrollOrientation === 'vertical'\n                ? window.scrollY\n                : window.scrollX;\n\n        // Parallax\n        this.translateValue = 0;\n\n        // Progress\n        this.progress = 0;\n        this.lastProgress = null;\n        this.progressModularModules = [];\n\n        // Inview\n        this.isInview = false;\n        this.isInteractive = false;\n        this.isAlreadyIntersected = false;\n        this.isInFold = false;\n        this.isFirstResize = true;\n\n        // Init\n        this._init();\n    }\n\n    /**\n     * Lifecyle - Initialize progress tracking.\n     *\n     * @private\n     */\n    private _init() {\n        if (!this.needRaf) {\n            return;\n        }\n\n        // Prepare modules progress\n        if (this.modularInstance && this.attributes.scrollModuleProgress) {\n            this._getProgressModularModules();\n        }\n\n        // First resize to compute all values\n        this._resize();\n    }\n\n    /**\n     * Callback - Resize callback\n     */\n    public onResize({ currentScroll }: IScrollElementCallbacksValues) {\n        this.currentScroll = currentScroll;\n        this._resize();\n    }\n\n    /**\n     * Callback - RAF callback\n     */\n    public onRender({ currentScroll, smooth }: IScrollElementCallbacksValues) {\n        const wSize =\n            this.scrollOrientation === 'vertical'\n                ? window.innerHeight\n                : window.innerWidth;\n        this.currentScroll = currentScroll;\n        this._computeProgress();\n\n        // Parallax\n        if (\n            this.attributes.scrollSpeed &&\n            !isNaN(this.attributes.scrollSpeed)\n        ) {\n            // if touch detected or smooth disabled\n            if (!this.attributes.scrollEnableTouchSpeed && !smooth) {\n                if (this.translateValue) {\n                    this.$el.style.transform = `translate3d(0, 0, 0)`;\n                }\n                this.translateValue = 0;\n\n                // if mousewheel or smooth enabled\n            } else {\n                // Check fold condition\n                if (this.isInFold) {\n                    const progress = Math.max(0, this.progress);\n                    this.translateValue =\n                        progress * wSize * this.attributes.scrollSpeed * -1;\n                } else {\n                    const progress = mapRange(0, 1, -1, 1, this.progress);\n                    this.translateValue =\n                        progress * wSize * this.attributes.scrollSpeed * -1;\n                }\n\n                this.$el.style.transform =\n                    this.scrollOrientation === 'vertical'\n                        ? `translate3d(0, ${this.translateValue}px, 0)`\n                        : `translate3d(${this.translateValue}px, 0, 0)`;\n            }\n        }\n    }\n\n    /**\n     * Inview callback\n     */\n    public setInview() {\n        if (this.isInview) {\n            return;\n        }\n\n        this.isInview = true;\n        this.$el.classList.add(this.attributes.scrollClass);\n\n        const way: scrollCallWay = 'enter';\n        const from: scrollCallFrom = this._getScrollCallFrom();\n        this.attributes.scrollCall && this._dispatchCall(way, from);\n    }\n\n    /**\n     * Out of view callback\n     */\n    public setOutOfView() {\n        if (!(this.isInview && this.attributes.scrollRepeat)) {\n            return;\n        }\n\n        this.isInview = false;\n        this.$el.classList.remove(this.attributes.scrollClass);\n\n        const way: scrollCallWay = 'leave';\n        const from: scrollCallFrom = this._getScrollCallFrom();\n        this.attributes.scrollCall && this._dispatchCall(way, from);\n    }\n\n    /**\n     * Switch interactivity on to subscribe the instance to the RAF\n     * and start calculations.\n     */\n    public setInteractivityOn() {\n        if (this.isInteractive) {\n            return;\n        }\n\n        this.isInteractive = true;\n        this.subscribeElementUpdateFn(this);\n    }\n\n    /**\n     * Switch interactivity off to unsubscribe the instance to the RAF\n     * and stop calculations.\n     */\n    public setInteractivityOff() {\n        if (!this.isInteractive) {\n            return;\n        }\n\n        this.isInteractive = false;\n        this.unsubscribeElementUpdateFn(this);\n\n        // Force progress to progress limit when the element is out\n        this.lastProgress != null &&\n            this._computeProgress(closestNumber([0, 1], this.lastProgress));\n    }\n\n    /**\n     * Resize method that compute the element's values.\n     *\n     * @private\n     */\n    private _resize() {\n        this.metrics.bcr = this.$el.getBoundingClientRect();\n        this._computeMetrics();\n        this._computeIntersection();\n\n        // First resize logic\n        if (this.isFirstResize) {\n            this.isFirstResize = false;\n            // Dispatch default call if the element is in fold.\n            if (this.isInFold) {\n                this.setInview();\n            }\n        }\n    }\n\n    /**\n     * Compute element's offsets and determine if the element is in fold.\n     *\n     * @private\n     */\n    private _computeMetrics() {\n        const { top, left, height, width } = this.metrics.bcr;\n        const wSize =\n            this.scrollOrientation === 'vertical'\n                ? window.innerHeight\n                : window.innerWidth;\n        const metricsStart = this.scrollOrientation === 'vertical' ? top : left;\n        const metricsSize =\n            this.scrollOrientation === 'vertical' ? height : width;\n\n        this.metrics.offsetStart =\n            this.currentScroll + metricsStart - this.translateValue;\n        this.metrics.offsetEnd = this.metrics.offsetStart + metricsSize;\n\n        if (\n            this.metrics.offsetStart < wSize &&\n            !this.attributes.scrollIgnoreFold\n        ) {\n            this.isInFold = true;\n        } else {\n            this.isInFold = false;\n        }\n    }\n\n    /**\n     * Compute intersection values depending on the context.\n     *\n     * @private\n     */\n    private _computeIntersection() {\n        // Window size\n        const wSize =\n            this.scrollOrientation === 'vertical'\n                ? window.innerHeight\n                : window.innerWidth;\n\n        // Metrics size\n        const metricsSize =\n            this.scrollOrientation === 'vertical'\n                ? this.metrics.bcr.height\n                : this.metrics.bcr.width;\n\n        // Offset\n        const offset = this.attributes.scrollOffset.split(',');\n        const offsetStart = offset[0] != undefined ? offset[0].trim() : '0';\n        const offsetEnd = offset[1] != undefined ? offset[1].trim() : '0';\n\n        // Positions\n        const scrollPosition = this.attributes.scrollPosition.split(',');\n        let scrollPositionStart =\n            scrollPosition[0] != undefined ? scrollPosition[0].trim() : 'start';\n        const scrollPositionEnd =\n            scrollPosition[1] != undefined ? scrollPosition[1].trim() : 'end';\n\n        // Viewport\n        const viewportStart = offsetStart.includes('%')\n            ? wSize * parseInt(offsetStart.replace('%', '').trim()) * 0.01\n            : parseInt(offsetStart);\n        const viewportEnd = offsetEnd.includes('%')\n            ? wSize * parseInt(offsetEnd.replace('%', '').trim()) * 0.01\n            : parseInt(offsetEnd);\n\n        // Fold exception\n        if (this.isInFold) {\n            scrollPositionStart = 'fold';\n        }\n\n        // Define Intersection Start\n        switch (scrollPositionStart) {\n            case 'start':\n                this.intersection.start =\n                    this.metrics.offsetStart - wSize + viewportStart;\n                break;\n\n            case 'middle':\n                this.intersection.start =\n                    this.metrics.offsetStart -\n                    wSize +\n                    viewportStart +\n                    metricsSize * 0.5;\n                break;\n\n            case 'end':\n                this.intersection.start =\n                    this.metrics.offsetStart -\n                    wSize +\n                    viewportStart +\n                    metricsSize;\n                break;\n\n            case 'fold':\n                this.intersection.start = 0;\n                break;\n\n            default:\n                this.intersection.start =\n                    this.metrics.offsetStart - wSize + viewportStart;\n                break;\n        }\n\n        // Define Intersection End\n        switch (scrollPositionEnd) {\n            case 'start':\n                this.intersection.end = this.metrics.offsetStart - viewportEnd;\n                break;\n\n            case 'middle':\n                this.intersection.end =\n                    this.metrics.offsetStart - viewportEnd + metricsSize * 0.5;\n                break;\n\n            case 'end':\n                this.intersection.end =\n                    this.metrics.offsetStart - viewportEnd + metricsSize;\n                break;\n\n            default:\n                this.intersection.end =\n                    this.metrics.offsetStart - viewportEnd + metricsSize;\n                break;\n        }\n\n        // Avoid to have the end < the start intersection >\n        if (this.intersection.end <= this.intersection.start) {\n            switch (scrollPositionEnd) {\n                case 'start':\n                    this.intersection.end = this.intersection.start + 1;\n                    break;\n\n                case 'middle':\n                    this.intersection.end =\n                        this.intersection.start + metricsSize * 0.5;\n                    break;\n\n                case 'end':\n                    this.intersection.end =\n                        this.intersection.start + metricsSize;\n                    break;\n\n                default:\n                    this.intersection.end = this.intersection.start + 1;\n                    break;\n            }\n        }\n    }\n\n    /**\n     * Compute the scroll progress of the element depending\n     * on its intersection values.\n     *\n     * @private\n     *\n     * @param {number} [forcedProgress] - Value to force progress.\n     */\n    private _computeProgress(forcedProgress?: number) {\n        // Progress\n        const progress =\n            forcedProgress ??\n            clamp(\n                0,\n                1,\n                normalize(\n                    this.intersection.start,\n                    this.intersection.end,\n                    this.currentScroll\n                )\n            );\n\n        this.progress = progress;\n\n        if (progress != this.lastProgress) {\n            this.lastProgress = progress;\n\n            // Set the element's progress to the css variable\n            this.attributes.scrollCssProgress && this._setCssProgress(progress);\n\n            // Set the element's progress to the custom event listeners\n            this.attributes.scrollEventProgress &&\n                this._setCustomEventProgress(progress);\n\n            // Set the element's progress to inline modules\n            if (this.attributes.scrollModuleProgress) {\n                for (const modularModules of this.progressModularModules) {\n                    this.modularInstance &&\n                        this.modularInstance.call(\n                            PROGRESS_MODULAR_METHOD,\n                            progress,\n                            modularModules.moduleName,\n                            modularModules.moduleId\n                        );\n                }\n            }\n\n            // Logic to trigger the inview/out of view callbacks\n            progress > 0 && progress < 1 && this.setInview();\n            progress === 0 && this.setOutOfView();\n            progress === 1 && this.setOutOfView();\n        }\n    }\n\n    /**\n     * Set the element's progress to a specific css variable.\n     *\n     * @private\n     *\n     * @param {number} [currentProgress] - Progress value.\n     */\n    _setCssProgress(currentProgress = 0) {\n        this.$el.style.setProperty(\n            PROGRESS_CSS_VAR,\n            currentProgress.toString()\n        );\n    }\n\n    /**\n     * Set the element's progress to the custom event listeners.\n     *\n     * @private\n     *\n     * @param {number} [currentProgress] - Progress value.\n     */\n    _setCustomEventProgress(currentProgress = 0) {\n        const customEventName = this.attributes.scrollEventProgress;\n\n        if (!customEventName) return;\n\n        const customEvent = new CustomEvent(customEventName, {\n            detail: {\n                target: this.$el,\n                progress: currentProgress,\n            },\n        });\n        window.dispatchEvent(customEvent);\n    }\n\n    /**\n     * Get modular modules that can listen the element's progress.\n     *\n     * @private\n     */\n    _getProgressModularModules() {\n        if (!this.modularInstance) {\n            return;\n        }\n\n        const modulesIdNames = Object.keys(this.$el.dataset).filter((key) =>\n            key.includes('module')\n        );\n        const modules: any[] = Object.entries(this.modularInstance.modules);\n\n        if (!modulesIdNames.length) {\n            return;\n        }\n\n        for (const modulesIdName of modulesIdNames) {\n            const moduleId = this.$el.dataset[modulesIdName];\n\n            if (!moduleId) {\n                return;\n            }\n\n            for (const module of modules) {\n                const [moduleName, moduleObj] = module;\n\n                if (moduleId in moduleObj) {\n                    this.progressModularModules.push({\n                        moduleName,\n                        moduleId,\n                    });\n                }\n            }\n        }\n    }\n\n    /**\n     * Function to get scroll call from.\n     *\n     * @private\n     */\n    _getScrollCallFrom(): scrollCallFrom {\n        const closestIntersectionValue = closestNumber(\n            [this.intersection.start, this.intersection.end],\n            this.currentScroll\n        );\n        return this.intersection.start === closestIntersectionValue\n            ? 'start'\n            : 'end';\n    }\n\n    /**\n     * Function to dispatch a custom event or call a modular callback.\n     *\n     * @private\n     *\n     * @param {scrollCallWay} way - Enter or leave.\n     * @param {scrollCallFrom} from - Start or end.\n     */\n    _dispatchCall(way: scrollCallWay, from: scrollCallFrom) {\n        const callParameters = this.attributes.scrollCall?.split(',');\n        const callSelf = this.attributes?.scrollCallSelf;\n\n        if (callParameters && callParameters.length > 1) {\n            // Using Modular.js (https://github.com/modularorg/modularjs)\n            const [func, moduleName, moduleId] = callParameters;\n            let targetModuleId;\n\n            // If the module is set on the scroll element\n            if (callSelf) {\n                targetModuleId = this.$el.dataset[`module${moduleName.trim()}`];\n            } else {\n                targetModuleId = moduleId;\n            }\n\n            this.modularInstance &&\n                this.modularInstance.call(\n                    func.trim(),\n                    {\n                        target: this.$el,\n                        way,\n                        from,\n                    },\n                    moduleName.trim(),\n                    targetModuleId?.trim()\n                );\n        } else if (callParameters) {\n            // Using CustomEvent API (https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent)\n            const [customEventName] = callParameters;\n            const customEvent = new CustomEvent(customEventName, {\n                detail: {\n                    target: this.$el,\n                    way,\n                    from,\n                },\n            });\n            window.dispatchEvent(customEvent);\n        }\n    }\n}\n","/**\n * Integrates Lenis with Locomotive's built-in animation system\n */\n\nimport {\n    CoreOptions,\n    IModular,\n    IScrollElementCallbacksValues,\n    scrollOrientation,\n} from '../types';\nimport IO from './IO';\nimport ScrollElement from './ScrollElement';\n\n/** Defined attributes that need a requestAnimationFrame */\nconst ATTRIBUTES_THAT_NEED_RAF = [\n    'scrollOffset',\n    'scrollPosition',\n    'scrollModuleProgress',\n    'scrollCssProgress',\n    'scrollEventProgress',\n    'scrollSpeed',\n];\n\n/** Default root margins */\nconst TRIGGER_ROOT_MARGIN = '-1px -1px -1px -1px';\nconst RAF_ROOT_MARGIN = '100% 100% 100% 100%'; // Add 100vh top/bottom && 100vw left/right to use a biggest value with data-scroll-speed\n\nexport default class Core {\n    private $scrollContainer!: HTMLElement;\n    private modularInstance?: IModular;\n    private triggerRootMargin!: string;\n    private rafRootMargin!: string;\n    private scrollElements!: ScrollElement[];\n    private triggeredScrollElements!: ScrollElement[];\n    private RAFScrollElements!: ScrollElement[];\n    private scrollElementsToUpdate!: ScrollElement[];\n    private IOTriggerInstance!: IO;\n    private IORafInstance!: IO;\n    private scrollOrientation!: scrollOrientation;\n\n    constructor({\n        $el,\n        modularInstance,\n        triggerRootMargin,\n        rafRootMargin,\n        scrollOrientation,\n    }: CoreOptions) {\n        if (!$el) {\n            console.error('Please provide a DOM Element as scrollContainer');\n            return;\n        }\n\n        // Scroll container\n        this.$scrollContainer = $el;\n\n        // Modular.js\n        this.modularInstance = modularInstance;\n\n        // Scroll Direction\n        this.scrollOrientation = scrollOrientation;\n\n        // IO Margins\n        this.triggerRootMargin = triggerRootMargin ?? TRIGGER_ROOT_MARGIN;\n        this.rafRootMargin = rafRootMargin ?? RAF_ROOT_MARGIN;\n\n        // ScrollElements arrays\n        this.scrollElements = [];\n        this.triggeredScrollElements = [];\n        this.RAFScrollElements = [];\n        this.scrollElementsToUpdate = [];\n\n\n        // Init\n        this._init();\n    }\n\n    /**\n     * Lifecyle - Initialize the core.\n     *\n     * @private\n     */\n    private _init() {\n        const $scrollElements =\n            this.$scrollContainer.querySelectorAll('[data-scroll]');\n\n        const $scrollElementsArr = Array.from($scrollElements) as HTMLElement[]\n        this._subscribeScrollElements($scrollElementsArr);\n\n        // Trigger IO\n        this.IOTriggerInstance = new IO({\n            scrollElements: [...this.triggeredScrollElements],\n            rootMargin: this.triggerRootMargin,\n            IORaf: false,\n        });\n\n        // Raf IO\n        this.IORafInstance = new IO({\n            scrollElements: [...this.RAFScrollElements],\n            rootMargin: this.rafRootMargin,\n            IORaf: true,\n        });\n    }\n\n    /**\n     * Lifecyle - Destroy core.\n     */\n    public destroy() {\n        this.IOTriggerInstance.destroy();\n        this.IORafInstance.destroy();\n        this._unsubscribeAllScrollElements();\n    }\n\n    /**\n     * Callback - Resize callback.\n     */\n    onResize({ currentScroll }: IScrollElementCallbacksValues) {\n        for (const scrollElement of this.RAFScrollElements) {\n            scrollElement.onResize({\n                currentScroll,\n            } as IScrollElementCallbacksValues);\n        }\n    }\n\n    /**\n     * Callback - RAF callback.\n     */\n    onRender({ currentScroll, smooth }: IScrollElementCallbacksValues) {\n        for (const scrollElement of this.scrollElementsToUpdate) {\n            scrollElement.onRender({\n                currentScroll,\n                smooth,\n            } as IScrollElementCallbacksValues);\n        }\n    }\n\n    /**\n     * Remove items from lists of scroll elements and compute all new values.\n     *\n     * @param {HTMLElement} $oldContainer - HTMLElement that contains data-scroll elements to unsubscribe\n     */\n    removeScrollElements($oldContainer: HTMLElement) {\n        const $scrollElementsToRemove =\n            $oldContainer.querySelectorAll('[data-scroll]');\n\n        if (!$scrollElementsToRemove.length) return;\n\n        // 1. Remove from IO\n        for (let index = 0; index < this.triggeredScrollElements.length; index++) {\n            const scrollElement = this.triggeredScrollElements[index];\n            const $scrollElementsToRemoveArr = Array.from($scrollElementsToRemove) as HTMLElement []\n            if ($scrollElementsToRemoveArr.indexOf(scrollElement.$el) > -1) {\n                this.IOTriggerInstance.unobserve(scrollElement.$el);\n                this.triggeredScrollElements.splice(index, 1);\n            }\n        }\n\n        for (let index = 0; index < this.RAFScrollElements.length; index++) {\n            const scrollElement = this.RAFScrollElements[index];\n            const $scrollElementsToRemoveArr = Array.from($scrollElementsToRemove) as HTMLElement []\n            if ($scrollElementsToRemoveArr.indexOf(scrollElement.$el) > -1) {\n                this.IORafInstance.unobserve(scrollElement.$el);\n                this.RAFScrollElements.splice(index, 1);\n            }\n        }\n\n        // 2. Remove from scrollElementsToUpdate[] and scrollElements[]\n        $scrollElementsToRemove.forEach(($scrollElement) => {\n            const targetScrollElementToUpdate =\n                this.scrollElementsToUpdate.find(\n                    (scrollElement) => scrollElement.$el === $scrollElement\n                );\n            const targetScrollElement = this.scrollElements.find(\n                (scrollElement) => scrollElement.$el === $scrollElement\n            );\n\n            if (targetScrollElementToUpdate) {\n                this._unsubscribeElementUpdate(targetScrollElementToUpdate);\n            }\n            if (targetScrollElement) {\n                this.scrollElements = this.scrollElements.filter(\n                    (scrollElementItem) =>\n                        scrollElementItem.id != targetScrollElement.id\n                );\n            }\n        });\n    }\n\n    /**\n     * Add items to lists of scroll elements and compute all new values.\n     *\n     * @param {HTMLElement} $newContainer - HTMLElement that contains data-scroll elements to subscribe\n     */\n    addScrollElements($newContainer: HTMLElement) {\n        // 3. Rebuild ScrollElements\n        const $scrollElements = $newContainer.querySelectorAll('[data-scroll]');\n\n        // 4. Get max scrollElement.id\n        const ids: number[] = [];\n        this.scrollElements.forEach((scrollElement) => {\n            ids.push(scrollElement.id);\n        });\n        const maxID = Math.max(...ids);\n        const fromIndex = maxID + 1;\n        const $scrollElementsArr = Array.from($scrollElements) as HTMLElement[]\n        this._subscribeScrollElements(\n            $scrollElementsArr,\n            fromIndex,\n            true\n        );\n    }\n\n    /**\n     * Create a ScrollElement instance for each elements with\n     * `data-scroll` attribute.\n     *\n     * @private\n     *\n     * @param {HTMLElement[]} $scrollElements - List of elements that need\n     *     to be regarded.\n     */\n    _subscribeScrollElements(\n        $scrollElements: HTMLElement[],\n        fromIndex = 0,\n        toObserve = false\n    ) {\n        // For each scroll element create a ScrollElement instance\n        for (let index = 0; index < $scrollElements.length; index++) {\n            const $scrollElement = $scrollElements[index];\n            const needRaf = this._checkRafNeeded($scrollElement);\n\n            const scrollElementInstance = new ScrollElement({\n                $el: $scrollElement,\n                id: fromIndex + index,\n                scrollOrientation: this.scrollOrientation,\n                modularInstance: this.modularInstance,\n                subscribeElementUpdateFn:\n                    this._subscribeElementUpdate.bind(this),\n                unsubscribeElementUpdateFn:\n                    this._unsubscribeElementUpdate.bind(this),\n                needRaf,\n            });\n\n            // Push to common array\n            this.scrollElements.push(scrollElementInstance);\n\n            // Push to specific array\n            if (needRaf) {\n                this.RAFScrollElements.push(scrollElementInstance);\n\n                // Dynamic observe item\n                if (toObserve) {\n                    this.IORafInstance.scrollElements.push(\n                        scrollElementInstance\n                    );\n                    this.IORafInstance.observe(scrollElementInstance.$el);\n                }\n            } else {\n                this.triggeredScrollElements.push(scrollElementInstance);\n\n                // Dynamic observe item\n                if (toObserve) {\n                    this.IOTriggerInstance.scrollElements.push(\n                        scrollElementInstance\n                    );\n                    this.IOTriggerInstance.observe(scrollElementInstance.$el);\n                }\n            }\n        }\n    }\n\n    /**\n     * Clear all ScrollElement arrays.\n     *\n     * @private\n     */\n    _unsubscribeAllScrollElements() {\n        this.scrollElements = [];\n        this.RAFScrollElements = [];\n        this.triggeredScrollElements = [];\n        this.scrollElementsToUpdate = [];\n    }\n\n    /**\n     * Subscribe ScrollElement instance that needs to be updated.\n     *\n     * @private\n     *\n     * @param {ScrollElement} scrollElement - ScrollElement instance inview\n     *     that needs to be updated.\n     */\n    _subscribeElementUpdate(scrollElement: ScrollElement) {\n        this.scrollElementsToUpdate.push(scrollElement);\n    }\n\n    /**\n     * Unscribe ScrollElement instance that doesn't need to be updated.\n     *\n     * @private\n     *\n     * @param {ScrollElement} scrollElement - The updated ScrollElement instance\n     *     out of view now.\n     */\n    _unsubscribeElementUpdate(scrollElement: ScrollElement) {\n        this.scrollElementsToUpdate = this.scrollElementsToUpdate.filter(\n            (scrollElementToUpdate) =>\n                scrollElementToUpdate.id != scrollElement.id\n        );\n    }\n\n    /**\n     * Check if a DOM Element need a requestAnimationFrame to be used.\n     *\n     * @private\n     *\n     * @param {HTMLElement} $scrollElement - The element that needs to be checked.\n     *\n     * @returns {boolean}\n     */\n    _checkRafNeeded($scrollElement: HTMLElement) {\n        let attributesThatNeedRaf = [...ATTRIBUTES_THAT_NEED_RAF];\n\n        // Remove utils\n        const removeAttribute = (attributeToRemove: string) => {\n            attributesThatNeedRaf = attributesThatNeedRaf.filter(\n                (attribute) => attribute != attributeToRemove\n            );\n        };\n\n        // 1. Check scroll offset values\n        if ($scrollElement.dataset.scrollOffset) {\n            const value = $scrollElement.dataset.scrollOffset\n                .split(',')\n                .map((test) => test.replace('%', '').trim())\n                .join(',');\n            if (value != '0,0') {\n                return true;\n            } else {\n                removeAttribute('scrollOffset');\n            }\n        } else {\n            removeAttribute('scrollOffset');\n        }\n\n        // 2. Check scroll position values\n        if ($scrollElement.dataset.scrollPosition) {\n            const value = $scrollElement.dataset.scrollPosition.trim();\n            if (value != 'top,bottom') {\n                return true;\n            } else {\n                removeAttribute('scrollPosition');\n            }\n        } else {\n            removeAttribute('scrollPosition');\n        }\n\n        // 3. Check scroll speed values\n        if (\n            $scrollElement.dataset.scrollSpeed &&\n            !isNaN(parseFloat($scrollElement.dataset.scrollSpeed))\n        ) {\n            return true;\n        } else {\n            removeAttribute('scrollSpeed');\n        }\n\n        // 4. Check others attributes\n        for (const attribute of attributesThatNeedRaf) {\n            if (attribute in $scrollElement.dataset) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n","/**\n * Resize Observer\n *\n * The Resize Observer API provides a performant mechanism by which code can monitor an element for changes to its size,\n * with notifications being delivered to the observer each time the size changes.\n *\n * Features functions to:\n *\n * - Trigger the resize callback if the specified element's size change.\n *\n * References:\n *\n * - {@link https://developer.mozilla.org/en-US/docs/Web/API/Resize_Observer_API}\n */\n\nimport { IROOptions } from '../types';\n\nexport default class RO {\n    private $resizeElements: HTMLElement[];\n    private isFirstObserve: boolean;\n    private observer!: ResizeObserver;\n    private resizeCallback: () => void;\n\n    constructor({ resizeElements, resizeCallback = () => {} }: IROOptions) {\n        // Parameters\n        this.$resizeElements = resizeElements;\n        this.resizeCallback = resizeCallback;\n\n        // Flags\n        this.isFirstObserve = true;\n\n        // Init\n        this._init();\n    }\n\n    /**\n     * Lifecyle - Initialize Resize Observer.\n     *\n     * @private\n     */\n    private _init() {\n        // Callback\n        const onResize = (entries: ResizeObserverEntry[]) => {\n            !this.isFirstObserve && this.resizeCallback?.();\n            this.isFirstObserve = false;\n        };\n\n        // Instance\n        this.observer = new ResizeObserver(onResize);\n\n        // Observe each default elements\n        for (const $resizeElement of this.$resizeElements) {\n            this.observer.observe($resizeElement);\n        }\n    }\n\n    /**\n     * Lifecyle - Destroy Resize Observer.\n     */\n    public destroy() {\n        this.observer.disconnect();\n    }\n}\n","//@ts-ignore\nimport Lenis from 'lenis';\nimport Core from './core/Core';\nimport RO from './core/RO';\nimport {\n    ILenisScrollToOptions,\n    ILenisScrollValues,\n    ILocomotiveScrollOptions,\n    IModular,\n    lenisTargetScrollTo,\n} from './types';\nimport type { LenisOptions } from 'lenis';\n\n/**\n * @type {LenisOptions}\n */\nconst defaultLenisOptions: LenisOptions = {\n    wrapper: window,\n    content: document.documentElement,\n    wheelEventsTarget: window,\n    eventsTarget: window,\n    smoothWheel: true,\n    syncTouch: false,\n    syncTouchLerp: 0.075,\n    touchInertiaMultiplier: 35,\n    duration: 0.75,\n    easing: (t) => Math.min(1, 1.001 - Math.pow(2, -10 * t)), // https://www.desmos.com/calculator/brs54l4xou\n    lerp: 0.1,\n    infinite: false,\n    orientation: 'vertical',\n    gestureOrientation: 'vertical',\n    touchMultiplier: 1,\n    wheelMultiplier: 1,\n    autoResize: true\n};\n\n/**\n * Locomotive Scroll\n *\n * Detection of elements in viewport & smooth scrolling with parallax.\n *\n * Inspired by\n * {@link https://github.com/locomotivemtl/locomotive-scroll locomotive-scroll.js}\n * and built around\n * {@link https://github.com/darkroomengineering/lenis lenis.js}.\n */\n\nexport default class LocomotiveScroll {\n    public rafPlaying: boolean;\n\n    private lenisInstance: any;\n    private coreInstance: any;\n\n    private lenisOptions: LenisOptions;\n    private modularInstance?: IModular;\n    private triggerRootMargin?: string;\n    private rafRootMargin?: string;\n    private rafInstance?: any;\n    private autoResize?: boolean;\n    private autoStart?: boolean;\n    private ROInstance?: RO;\n    private scrollCallback?(scrollValues: ILenisScrollValues): void;\n    private initCustomTicker?: (render: () => void) => void;\n    private destroyCustomTicker?: (render: () => void) => void;\n    private _onRenderBind: () => void;\n    private _onResizeBind: () => void;\n    private _onScrollToBind: (event: MouseEvent) => void;\n\n    constructor({\n        lenisOptions = {},\n        modularInstance,\n        triggerRootMargin,\n        rafRootMargin,\n        autoResize = true,\n        autoStart = true,\n        scrollCallback = () => {},\n        initCustomTicker,\n        destroyCustomTicker,\n    }: ILocomotiveScrollOptions = {}) {\n        // Arguments\n        this.lenisOptions = { ...defaultLenisOptions, ...lenisOptions };\n\n        Object.assign(this, {\n            lenisOptions,\n            modularInstance,\n            triggerRootMargin,\n            rafRootMargin,\n            autoResize,\n            autoStart,\n            scrollCallback,\n            initCustomTicker,\n            destroyCustomTicker,\n        });\n\n        // Binding\n        this._onRenderBind = this._onRender.bind(this);\n        this._onScrollToBind = this._onScrollTo.bind(this);\n        this._onResizeBind = this._onResize.bind(this);\n\n        // Data\n        this.rafPlaying = false;\n\n        // Init\n        this._init();\n    }\n\n    /**\n     * Lifecyle - Initialize instance.\n     *\n     * @private\n     */\n    private _init(): void {\n        // Create Lenis instance\n        this.lenisInstance = new Lenis({\n            wrapper: this.lenisOptions.wrapper,\n            content: this.lenisOptions.content,\n            eventsTarget: this.lenisOptions.eventsTarget,\n            lerp: this.lenisOptions.lerp,\n            duration: this.lenisOptions.duration,\n            orientation: this.lenisOptions.orientation,\n            gestureOrientation: this.lenisOptions.gestureOrientation,\n            smoothWheel: this.lenisOptions.smoothWheel,\n            syncTouch: this.lenisOptions.syncTouch,\n            syncTouchLerp: this.lenisOptions.syncTouchLerp,\n            touchInertiaMultiplier: this.lenisOptions.touchInertiaMultiplier,\n            wheelMultiplier: this.lenisOptions.wheelMultiplier,\n            touchMultiplier: this.lenisOptions.touchMultiplier,\n            easing: this.lenisOptions.easing,\n        });\n        this.lenisInstance?.on('scroll', this.scrollCallback);\n\n        // Add scroll direction attribute on body\n        document.documentElement.setAttribute(\n            'data-scroll-orientation',\n            this.lenisInstance.options.orientation\n        );\n\n        requestAnimationFrame(() => {\n            // Create Core Instance\n            this.coreInstance = new Core({\n                $el: this.lenisInstance.rootElement,\n                modularInstance: this.modularInstance,\n                triggerRootMargin: this.triggerRootMargin,\n                rafRootMargin: this.rafRootMargin,\n                scrollOrientation: this.lenisInstance.options.orientation,\n            });\n\n            // Bind Events\n            this._bindEvents();\n\n            // RAF warning\n            if (this.initCustomTicker && !this.destroyCustomTicker) {\n                console.warn(\n                    'initCustomTicker callback is declared, but destroyCustomTicker is not. Please pay attention. It could cause trouble.'\n                );\n            } else if (!this.initCustomTicker && this.destroyCustomTicker) {\n                console.warn(\n                    'destroyCustomTicker callback is declared, but initCustomTicker is not. Please pay attention. It could cause trouble.'\n                );\n            }\n\n            // Start RAF\n            this.autoStart && this.start();\n        });\n    }\n\n    /**\n     * Lifecyle - Destroy instance.\n     */\n    public destroy(): void {\n        // Stop raf\n        this.stop();\n        // Unbind Events\n        this._unbindEvents();\n        // Destroy Lenis\n        this.lenisInstance.destroy();\n        // Destroy Core\n        this.coreInstance?.destroy();\n\n        // Ensure a delay before destroying to handle cases of instant destruction\n        requestAnimationFrame(() => {\n            this.coreInstance?.destroy();\n        });\n    }\n\n    /**\n     * Events - Subscribe events to listen.\n     */\n    private _bindEvents() {\n        this._bindScrollToEvents();\n\n        if (this.autoResize) {\n            if ('ResizeObserver' in window) {\n                this.ROInstance = new RO({\n                    resizeElements: [document.body],\n                    resizeCallback: this._onResizeBind,\n                });\n            } else {\n                (window as any).addEventListener('resize', this._onResizeBind);\n            }\n        }\n    }\n\n    /**\n     * Events - Unsubscribe listened events.\n     */\n    private _unbindEvents() {\n        this._unbindScrollToEvents();\n\n        if (this.autoResize) {\n            if ('ResizeObserver' in window) {\n                this.ROInstance && this.ROInstance.destroy();\n            } else {\n                (window as any).removeEventListener(\n                    'resize',\n                    this._onResizeBind\n                );\n            }\n        }\n    }\n\n    /**\n     * Events - Subscribe scrollTo events to listen.\n     */\n    private _bindScrollToEvents($container?: HTMLElement) {\n        const $rootContainer = $container\n            ? $container\n            : this.lenisInstance.rootElement;\n        const $scrollToElements =\n            $rootContainer?.querySelectorAll('[data-scroll-to]');\n\n        $scrollToElements?.length &&\n            $scrollToElements.forEach(($el: HTMLElement): void => {\n                $el.addEventListener('click', this._onScrollToBind, false);\n            });\n    }\n\n    /**\n     * Events - Unsubscribe scrollTo listened events.\n     */\n    private _unbindScrollToEvents($container?: HTMLElement) {\n        const $rootContainer = $container\n            ? $container\n            : this.lenisInstance.rootElement;\n        const $scrollToElements =\n            $rootContainer?.querySelectorAll('[data-scroll-to]');\n        $scrollToElements?.length &&\n            $scrollToElements.forEach(($el: HTMLElement) => {\n                $el.removeEventListener('click', this._onScrollToBind, false);\n            });\n    }\n\n    /**\n     * Callback - Resize callback.\n     */\n    private _onResize() {\n        // Waiting the next frame to get the new current scroll value return by Lenis\n        requestAnimationFrame(() => {\n            this.coreInstance?.onResize({\n                currentScroll: this.lenisInstance.scroll,\n            });\n        });\n    }\n\n    /**\n     * Callback - Render callback.\n     */\n    private _onRender() {\n        this.lenisInstance?.raf(Date.now());\n\n        this.coreInstance?.onRender({\n            currentScroll: this.lenisInstance.scroll,\n            smooth: this.lenisInstance.isSmooth,\n        });\n    }\n\n    /**\n     * Callback - Scroll To callback.\n     */\n    private _onScrollTo(event: MouseEvent) {\n        event.preventDefault();\n        const $target = (event.currentTarget as HTMLElement) ?? null;\n        if (!$target) return;\n        const target =\n            $target.getAttribute('data-scroll-to-href') ||\n            $target.getAttribute('href');\n        const offset = $target.getAttribute('data-scroll-to-offset') || 0;\n        const duration =\n            $target.getAttribute('data-scroll-to-duration') ||\n            this.lenisOptions.duration ||\n            defaultLenisOptions.duration;\n\n        target &&\n            this.scrollTo(target, {\n                offset: typeof offset === 'string' ? parseInt(offset) : offset,\n                duration:\n                    typeof duration === 'string'\n                        ? parseInt(duration)\n                        : duration,\n            });\n    }\n\n    /**\n     * Start RequestAnimationFrame that active Lenis smooth and scroll progress.\n     */\n    public start(): void {\n        if (this.rafPlaying) {\n            return;\n        }\n\n        // Call lenis start method\n        this.lenisInstance?.start();\n\n        this.rafPlaying = true;\n        this.initCustomTicker\n            ? this.initCustomTicker(this._onRenderBind)\n            : this._raf();\n    }\n\n    /**\n     * Stop RequestAnimationFrame that active Lenis smooth and scroll progress.\n     */\n    public stop(): void {\n        if (!this.rafPlaying) {\n            return;\n        }\n\n        // Call lenis stop method\n        this.lenisInstance?.stop();\n\n        this.rafPlaying = false;\n        this.destroyCustomTicker\n            ? this.destroyCustomTicker(this._onRenderBind)\n            : this.rafInstance && cancelAnimationFrame(this.rafInstance);\n    }\n\n    /**\n     * Remove old scroll elements items and rebuild ScrollElements instances.\n     */\n    public removeScrollElements($oldContainer: HTMLElement): void {\n        if (!$oldContainer) {\n            console.error('Please provide a DOM Element as $oldContainer');\n            return;\n        }\n\n        this._unbindScrollToEvents($oldContainer);\n        this.coreInstance?.removeScrollElements($oldContainer);\n    }\n\n    /**\n     * Add new scroll elements items and rebuild ScrollElements instances.\n     */\n    public addScrollElements($newContainer: HTMLElement): void {\n        if (!$newContainer) {\n            console.error('Please provide a DOM Element as $newContainer');\n            return;\n        }\n\n        this.coreInstance?.addScrollElements($newContainer);\n        requestAnimationFrame(() => {\n            this._bindScrollToEvents($newContainer);\n        });\n    }\n\n    /**\n     * Trigger resize callback.\n     */\n    public resize(): void {\n        this._onResizeBind();\n    }\n\n    /**\n     * Trigger scroll to callback.\n     */\n    public scrollTo(\n        target: lenisTargetScrollTo,\n        options?: ILenisScrollToOptions\n    ): void {\n        this.lenisInstance?.scrollTo(target, {\n            offset: options?.offset,\n            lerp: options?.lerp,\n            duration: options?.duration,\n            immediate: options?.immediate,\n            lock: options?.lock,\n            force: options?.force,\n            easing: options?.easing,\n            onComplete: options?.onComplete,\n        });\n    }\n\n    /**\n     * RequestAnimationFrame that active Lenis smooth and scroll progress.\n     *\n     * @private\n     *\n     */\n    private _raf() {\n        this._onRenderBind();\n        this.rafInstance = requestAnimationFrame(() => this._raf());\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}